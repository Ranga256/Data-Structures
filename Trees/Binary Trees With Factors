Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.

We make a binary tree using these integers, and each number may be used for any number of times. 
Each non-leaf node's value should be equal to the product of the values of its children.

Return the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.

Input: arr = [2,4]
Output: 3
Explanation: We can make these trees: [2], [4], [4, 2, 2]

Intuition:As we only bother about count place the count of every element in map and start the loop from 1st index, then take inner loop upto i and check condition
(arr[i]%arr[j]==0) => then check arr[i]/arr[j] is there in map if there multiply the count of arr[j] and arr[i]/arr[j] then add the count to map. finally count 
all values in map.

import java.util.Map;
class Solution {
    public int numFactoredBinaryTrees(int[] arr) {
        Map<Integer,Long> hash=new HashMap<>();
        int n=arr.length;
        Arrays.sort(arr);
        long tot=1;
        
            hash.put(arr[0],tot);
        for(int i=1;i<n;i++){
            long count=1;
            for(int j=0;j<i;j++){
                if(arr[i]%arr[j]==0){
                    if(hash.containsKey(arr[i]/arr[j])){
                        count+=hash.get(arr[j])*hash.get(arr[i]/arr[j]);
                    }
                }
            }
            hash.put(arr[i],count);
            tot+=count;
        }
        tot=tot%1000000007;
        return (int)tot;
    }
}
