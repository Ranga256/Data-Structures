Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic.
if at least one permutation of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.

Input: root = [2,3,1,3,1,null,1]
Output: 2 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: 
the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. 
Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int result=0;
    public boolean isPalindrome(int[] count){
        int c=0;
        for(int i=1;i<=9;i++){
            if(count[i]%2!=0){
                c++;
            }
            if(c>1){
                return false;
            }
        }
        return true;
    }
    public void dfs(TreeNode root,int[] count){
        if(root==null){
            return;
        }
        count[root.val]++;
        if(root.left==null && root.right==null){
            if(isPalindrome(count)==true){
               result++;
            }
        }
        else{
            dfs(root.left,count);
            dfs(root.right,count);
        }
        count[root.val]--;
    }
    public int pseudoPalindromicPaths (TreeNode root) {
        int[] count=new int[10];
        dfs(root,count);
        return result;
    }
}
