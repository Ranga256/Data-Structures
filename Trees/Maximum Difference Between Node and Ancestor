Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.

class Solution {
    int res=0;
    public void helper(TreeNode root,int min,int max){
        if(root==null){
            return;
        }
    helper(root.left,min,max);
    helper(root.right,min,max);
    min=Math.min(min,root.val);
    max=Math.max(max,root.val);
    res=Math.max(res,Math.max(Math.abs(max-root.val),Math.abs(root.val-min)));
}
    public int maxAncestorDiff(TreeNode root) {
        int max=Integer.MIN_VALUE;
        int min=Integer.MAX_VALUE;
        helper(root,min,max);
        return res;
    }
}
