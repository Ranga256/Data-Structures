You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake.

Recover the tree without changing its structure.

Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.

class Solution {
    TreeNode prev=new TreeNode(Integer.MIN_VALUE),first=null,second=null;
    public void inorder(TreeNode root){
        if(root==null){
            return;
        }
        inorder(root.left);
        if(root.val<prev.val){
            if(first==null){
            first=prev;
            }
            second=root;
        }
        prev=root;
        inorder(root.right);
        return;
    }
    public void recoverTree(TreeNode root) {
        inorder(root);
        int temp=first.val;
             first.val=second.val;
                second.val=temp;
    }
}
