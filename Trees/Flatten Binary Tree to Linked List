Given the root of a binary tree, flatten the tree into a "linked list":

The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.
The "linked list" should be in the same order as a pre-order traversal of the binary tree.

Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]

O(N) space solution:
class Solution {
    public void preorder(TreeNode root,List<TreeNode> li){
        if(root==null){
            return;
        }
        li.add(root);
        preorder(root.left,li);
        preorder(root.right,li);
    }
    public void result(TreeNode root,List<TreeNode> li,int ind){
        if(ind<li.size()){
        root.right=li.get(ind);
        root.left=null;
        }else{
            return;
        }
       result(root.right,li,ind+1); 
    }
    public void flatten(TreeNode root) {
        List<TreeNode> li=new ArrayList<>();
        if(root==null || (root.left==null && root.right==null)){
            return;
        }
        preorder(root,li);
        result(root,li,0);
    }
}

O(1) space solution:
class Solution {
    TreeNode prev=null;
    public void flatten(TreeNode root) {
         if(root==null)
            return;
        flatten(root.right);//traverse till right most.
        flatten(root.left);//got to left of right most
       root.left=null;//set left as null
        root.right=prev;//set right to previously traversed node
        prev=root;  //set prev to current node.
    }
}
