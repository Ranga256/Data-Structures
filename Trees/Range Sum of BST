Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.


class Solution {
    int sum=0;
    public void helper(TreeNode root, int low, int high){
        if(root==null){
            return;
        }
        if(root.val>=low && root.val<=high){
            sum+=root.val;
        }
        helper(root.left,low,high);
        helper(root.right,low,high);
    }
    public int rangeSumBST(TreeNode root, int low, int high) {
        helper(root,low,high);
        return sum;
    }
}
