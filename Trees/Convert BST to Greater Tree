Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

Intuition: do Recursive of right for right sum by sending val and then add that sum to root, then left recursion for leftsum and return lsum.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumbst(TreeNode root,int val){
        if(root==null){
            return val;
        }
        int rsum=0,lsum;
        rsum=sumbst(root.right,val);
        root.val+=rsum;
        lsum=sumbst(root.left,root.val);
        return lsum;
    }
    public TreeNode convertBST(TreeNode root) {
        if(root==null){
            return root;
        }
        int ans=sumbst(root,0);
        return root;
    }
}
