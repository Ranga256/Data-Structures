Given an array A[] of size N and a positive integer K, 
find the first negative integer for each and every window(contiguous subarray) of size K.

Input : 
N = 5
A[] = {-8, 2, 3, -6, 10}
K = 2
Output : 
-8 0 -6 -6
Explanation :
First negative integer for each window of size k
{-8, 2} = -8
{2, 3} = 0 (does not contain a negative integer)
{3, -6} = -6
{-6, 10} = -6
 
 
 class Compute {
    
    public long[] printFirstNegativeInteger(long A[], int N, int K)
    {
        List<Long> li=new ArrayList<>();
        long[] ans=new long[N-K+1];
        for(int i=0;i<K;i++){
           if(A[i]<0){
               li.add(A[i]);
           } 
        }
        if(li.isEmpty()){
            ans[0]=0;
        }else{
            ans[0]=li.get(0);
        }
        int j=K;
        int i=1;
        int k=1;
        if(A[0]<0){
            li.remove(0);
        }
        while(j<N){
            if(A[j]<0){
                li.add(A[j]);
            }
            if(li.isEmpty()){
                ans[k]=0;
                k++;
            }else{
                ans[k]=li.get(0);
                k++;
            }
            if(A[i]<0){
                li.remove(0);
            }
            i++;
            j++;
        }
        return ans;
    }
}
