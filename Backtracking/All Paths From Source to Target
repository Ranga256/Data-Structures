Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

Intuition: backtracking

class Solution {
    public void helper(int ind,int[][] graph,List<List<Integer>> res,List<Integer> list){
       if(ind==graph.length-1){
           List<Integer> temp=new ArrayList<>();
           for(Integer i:list){
               temp.add(i);
           }
           res.add(temp);
           return;
       }
       for(int i:graph[ind]){
           list.add(i);
           helper(i,graph,res,list);
           list.remove(Integer.valueOf(i));
       }
    }
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        list.add(0);
        helper(0,graph,res,list);
        return res;
    }
}
