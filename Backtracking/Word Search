Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once.

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true


class Solution {
    public boolean helper(char[][] board, String word,int i,int j,int ind,int m,int n,Set<List<Integer>> set){
        if(ind==word.length()){
            return true;
        }
        List<Integer> check=new ArrayList<>();
        check.add(i);
        check.add(j);
        if(i<0 || j<0 || i>=m || j>=n || board[i][j]!=word.charAt(ind) || set.contains(check)){
            return false;
        }
        set.add(check);
        boolean res = (helper(board,word,i+1,j,ind+1,m,n,set) || helper(board,word,i-1,j,ind+1,m,n,set) || helper(board,word,i,j+1,ind+1,m,n,set) || helper(board,word,i,j-1,ind+1,m,n,set));
        set.remove(check);
        return res;
    }
    public boolean exist(char[][] board, String word) {
        int m=board.length,n=board[0].length;
        Set<List<Integer>> set = new HashSet<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(helper(board,word,i,j,0,m,n,set)==true){
                    return true;
                }
                set.clear();
            }
        }
        return false;
    }
}
