You are playing a game that contains multiple characters, and each of the characters has two main properties: 
attack and defense. You are given a 2D integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game.

A character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. 
More formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei.

Return the number of weak characters.

Intuition: Ascending of attack and desecnding of defence and iterate from last by taking max
if max is bigger than value ++ else change max.

class Solution {
    public int numberOfWeakCharacters(int[][] properties) {
        Arrays.sort(properties, (a,b)->(a[0]==b[0]) ? Integer.compare(b[1],a[1]): Integer.compare(a[0],b[0]));
        int len=properties.length,count=0;
        int max=properties[len-1][1];
        for(int i=len-2;i>=0;i--){
            if(max>properties[i][1]){
                count++;
            }else{
                max=properties[i][1];
            }
        }
        return count;
    }
}
