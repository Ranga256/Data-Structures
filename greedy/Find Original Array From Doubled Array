An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, 
and then randomly shuffling the resulting array.

Given an array changed, return original if changed is a doubled array. 
If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.

Input: changed = [1,3,4,2,6,8]
Output: [1,3,4]
Explanation: One possible original array could be [1,3,4]:
- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.
Other original arrays could be [4,3,1] or [3,1,4].

class Solution {
    public int[] findOriginalArray(int[] changed) {
        int n=changed.length,k=0;
        Map<Integer,Integer> map=new HashMap<>();
        if(n%2!=0){
            return new int[0];
        }
        int[] res=new int[n/2];
        Arrays.sort(changed);
        for(int i=0;i<n;i++){
            map.put(changed[i],map.getOrDefault(changed[i],0)+1);
        }
        for(int i=0;i<n;i++){
            if(changed[i]==0){
                if(map.get(0)>=2){
                    map.put(0,map.get(0)-2);
                    res[k++]=0;
                }
            }
            else if(map.containsKey(changed[i]*2) && map.get(changed[i])>0 && map.get(changed[i]*2)>0){
                res[k++]=changed[i];
                map.put(changed[i],map.get(changed[i])-1);
                map.put(changed[i]*2,map.get(changed[i]*2)-1);
            }
        }
        if(k==n/2){
          return res;
        }
        return new int[0];
    }
}
