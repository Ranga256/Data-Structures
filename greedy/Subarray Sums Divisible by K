Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]

Intuition: with storing prefix sum % k count.

class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int n=nums.length,presum=0,c=0;
        Map<Integer,Integer> map=new HashMap<>();
        map.put(0, 1);
        for(int i=0;i<n;i++){
            presum+=nums[i];
            presum%=k;
            if(presum<0) presum +=k;
            if(map.containsKey(presum)){
                c+=map.get(presum);
            }
            map.put(presum,map.getOrDefault(presum, 0) + 1);
        }
        return c;      
    }
}
