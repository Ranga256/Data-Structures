Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

Intuition: Using BFs travel 4sides which has 1 and mark it visited.

class pair{
    int first;
    int second;
    public pair(int first,int second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    public void bfs(char[][] grid,int r,int c,int[][] vis){
        vis[r][c]=1;
        Queue<pair> que=new LinkedList<>();
        que.add(new pair(r,c));
        int n=grid.length,m=grid[0].length;
        while(!que.isEmpty()){
            int nrow=que.peek().first;
            int ncol=que.peek().second;
            que.remove();
        for(int i=-1;i<=1;i++){
            for(int j=-1;j<=1;j++){
                int row=nrow+i;
                int col=ncol+j;
                if(row>=0 && col>=0 && row<n && col<m && grid[row][col]=='1' && vis[row][col]==0 && i!=j && i+j!=0){
                    vis[row][col]=1;
                    que.add(new pair(row,col));
                }
            }
        }
    }
    }
    public int numIslands(char[][] grid) {
        int row=grid.length,col=grid[0].length;
        int[][] vis=new int[row][col];
        int count=0;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(vis[i][j]==0 && grid[i][j]=='1'){
                    count++;
                    bfs(grid,i,j,vis);
                }
            }
        }
        return count;
    }
}
