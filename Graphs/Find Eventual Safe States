There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph 

where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.
Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.

Intuition: graph, cycle detection if cycle exists the nodes which are not path visisted are safe nodes.

class Solution {
    public boolean dfs(int node,int[] vis,int[] pathvis,int[][] graph,List<Integer> res){
        vis[node]=1;
        pathvis[node]=1;
        for(int val:graph[node]){
            if(vis[val]==0){
                if(dfs(val,vis,pathvis,graph,res)==true){
                    return true;
                }
            }else if(pathvis[val]==1){
                    return true;
            }
        }
        //res.add(node);
        pathvis[node]=0;
        return false;
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int v=graph.length;
        int[] vis=new int[v];
        int[] pathvis=new int[v];
        List<Integer> res=new ArrayList<>();
        for(int i=0;i<graph.length;i++){
            if(vis[i]==0){
                dfs(i,vis,pathvis,graph,res);  
            }
        }
         for(int i=0; i<v; i++) {
            if(pathvis[i]==0)
                res.add(i);
        }
        return res;
    }
}
