There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first 
if you want to take course ai. For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

Intuition: graph, cycle detection if cycle exists return false

class Solution {
    public boolean dfs(int node,int[] vis,int[] pathvis,List<List<Integer>> adj){
        vis[node]=1;
        pathvis[node]=1;
        for(int val:adj.get(node)){
            if(vis[val]==0){
                if(dfs(val,vis,pathvis,adj)==true){
                    return true;
                }
            }else if(pathvis[val]==1){
                    return true;
            }
        }
        pathvis[node]=0;
        return false;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
       List<List<Integer>> adj=new ArrayList<>();
       for(int i=0;i<numCourses;i++){
           adj.add(new ArrayList<>());
       } 
       for(int i=0;i<prerequisites.length;i++){
           adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
       }

       int[] vis=new int[numCourses];
       int[] pathvis=new int[numCourses];
       for(int i=0;i<numCourses;i++){
           if(vis[i]==0){
               if(dfs(i,vis,pathvis,adj)==true){
                   return false;
               }
           }
       }
       return true;
    }
}
