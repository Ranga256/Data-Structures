You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).

You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. 

The difficulty of a day is the maximum difficulty of a job done on that day.

You are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].

Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.

Intuition: loop through from 0 to n of taking max of the difficulty and adding it to recusion and taking min.


Input: jobDifficulty = [6,5,4,3,2,1], d = 2
Output: 7
Explanation: First day you can finish the first 5 jobs, total difficulty = 6.
Second day you can finish the last job, total difficulty = 1.
The difficulty of the schedule = 6 + 1 = 7 


Memoization:
class Solution {
    public int helper(int ind,int[] jobDifficulty,int d,int[][] dp,int n){
        if(d==1){
            int sum=jobDifficulty[ind];
            for(int j=ind;j<n;j++){
                sum=Math.max(sum,jobDifficulty[j]);
            }
            return sum;
        }
        if(dp[ind][d]!=-1){
            return dp[ind][d];
        }
        int max=Integer.MIN_VALUE;
        int res=Integer.MAX_VALUE;
        for(int i=ind;i<=n-d;i++){
            max=Math.max(max,jobDifficulty[i]);
            res=Math.min(res,max+helper(i+1,jobDifficulty,d-1,dp,n));
        }
        return dp[ind][d]=res;
    }
    public int minDifficulty(int[] jobDifficulty, int d) {
        int n=jobDifficulty.length;
        int[][] dp=new int[n+1][d+1];
        if(n<d){
            return -1;
        }
        for(int[] arr: dp){
            Arrays.fill(arr,-1);
        }
        return helper(0,jobDifficulty,d,dp,n);
    }
}
