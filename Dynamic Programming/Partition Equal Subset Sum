import java.util.*;
public class Solution {
	public static boolean subset(int[] arr,int ind,int k,int[][] dp){
		if(k==0){
			return true;
		}
		if(ind==0){
			return arr[0]==k;
		}
		if(dp[ind][k]!=-1){
			return dp[ind][k]==0?false:true;
		}
		boolean Ntake=subset(arr,ind-1,k,dp);
		boolean take=false;
		if(arr[ind]<=k){
			take=subset(arr,ind-1,k-arr[ind],dp);
			dp[ind][k]=Ntake||take?1:0;
		}
		return take || Ntake;
	}
	public static boolean canPartition(int[] arr, int n) {
		// Write your code here.
		int sum=0;
		for(int i=0;i<n;i++){
			sum+=arr[i];
		}
		if(sum%2==1){
			return false;
		}
		int k=sum/2;
		int dp[][]=new int[n][k+1];
        for(int row[]: dp)
           Arrays.fill(row,-1);
		return subset(arr,n-1,k,dp);
	}
}
