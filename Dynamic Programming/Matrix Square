Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4


class Solution {
    public int maximalSquare(char[][] matrix) {
        int m=matrix.length,n=matrix[0].length;
        int[][] dp=new int[m][n];
        int i,j,min=Integer.MIN_VALUE;
        for(i=0;i<m;i++){
            for(j=0;j<n;j++){
                if(i==0 || j==0){
                    if(matrix[i][j]=='1'){
                    dp[i][j]=1;
                        min=Math.max(min,dp[i][j]);
                    }else{
                        dp[i][j]=0;
                    }
                }
            }
        }
        for(i=1;i<m;i++){
            for(j=1;j<n;j++){
                if(matrix[i][j]=='1'){
                dp[i][j]=1+Math.min(Math.min(dp[i-1][j], dp[i-1][j-1]),dp[i][j-1]);
                    min=Math.max(min,dp[i][j]);
                    System.out.println(dp[i][j]);
               }else{
                    dp[i][j]=0;
                }
            }
        }
        return min*min;
    }
}
