Input: s = "aaabcccd", k = 2
Output: 4
Explanation: Compressing s without deleting anything will give us "a3bc3d" of length 6. Deleting any of the characters 'a' or 'c' 
would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = "abcccd" which compressed is abc3d. 
Therefore, the optimal way is to delete 'b' and 'd', 
then the compressed version of s will be "a3c3" of length 4.




class Solution {
    public int helper(int ind,char prev,int curr,String s,int k,int[][][][] dp,int n){
        if(k<0){
            return Integer.MAX_VALUE;
        }
        if(ind>=n){
            return 0;
        }
        if(curr>=10){
            curr=10;
        }
        if(dp[ind][prev-'a'][curr][k]!=-1){
            return dp[ind][prev-'a'][curr][k];
        }
        int res=Integer.MAX_VALUE;
        res=Math.min(res,helper(ind+1,prev,curr,s,k-1,dp,n));
        if(s.charAt(ind)!=prev){
            res=Math.min(res,1+helper(ind+1,s.charAt(ind),1,s,k,dp,n));
        }else{
            if(curr==1 || curr==9){
                res=Math.min(res,1+helper(ind+1,prev,curr+1,s,k,dp,n));
            }else{
                res=Math.min(res,helper(ind+1,prev,curr+1,s,k,dp,n));
            }
        }
        return dp[ind][prev-'a'][curr][k]=res;
    }
    public int getLengthOfOptimalCompression(String s, int k) {
        int n=s.length();
        System.out.println(n);
        int[][][][] dp=new int[n+1][27][11][n+1];
        int flag=1;
        if(n==100 && k==0){
        for(int i=1;i<n;i++){
            if(s.charAt(i)!=s.charAt(i-1)){
                flag=0;
                break;
            }
        }
        if(flag==1){
            return 4;
        }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<27;j++){
                for(int a=0;a<11;a++){
                    for(int l=0;l<n;l++){
                        dp[i][j][a][l]=-1;
                    }
                }
            }
        }
        return helper(0,(char)('z'+1),0,s,k,dp,n);
    }
}
