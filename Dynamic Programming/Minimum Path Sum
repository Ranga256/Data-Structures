Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

class Solution {
    public int helper(int row,int col,int[][] grid,int[][] dp){
        if(row<0 || col<0){
            return 10000;
        }
        if(row==0 && col==0){
            return grid[row][col];
        }
        if(dp[row][col]!=-1){
            return dp[row][col];
        }
        int top = grid[row][col]+helper(row-1,col,grid,dp);
        int bottom = grid[row][col]+helper(row,col-1,grid,dp);
        return dp[row][col]=Math.min(top,bottom);
    }
    public int minPathSum(int[][] grid) {
        int m=grid.length,n=grid[0].length;
        int[][] dp=new int[m][n];
        for(int[] arr:dp){
            Arrays.fill(arr,-1);
        }
        return helper(m-1,n-1,grid,dp);
    }
}
