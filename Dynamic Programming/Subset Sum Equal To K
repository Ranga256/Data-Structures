You are given an array/list ‘ARR’ of ‘N’ positive integers and an integer ‘K’. 
Your task is to check if there exists a subset in ‘ARR’ with a sum equal to ‘K’.

Note: Return true if there exists a subset with sum equal to ‘K’. Otherwise, return false.

Sample Input 1:
2
4 5
4 3 2 1
5 4
2 5 1 6 7
Sample Output 1:
true
false

Memoization: using recursion take not take for all possible paths and check.

import java.util.*;
public class Solution {
	public static boolean sumsubset(int ind, int target,int[] arr,int[][] dp){
	
    if(target==0)
        return true;
    
    if(ind == 0)
        return arr[0] == target;
    if(dp[ind][target]!=-1)
        return dp[ind][target]==0?false:true;
        
    boolean notTaken = sumsubset(ind-1,target,arr,dp);
    
    boolean taken = false;
    if(arr[ind]<=target)
        taken = sumsubset(ind-1,target-arr[ind],arr,dp);
        dp[ind][target]=notTaken||taken?1:0;
    return notTaken||taken;
	}
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
		int sum=0;
		int dp[][]=new int[n][k+1];
           for(int row[]: dp){
             Arrays.fill(row,-1);
		   }
		return sumsubset(n-1,k,arr,dp);
    }
}

Tabulation

import java.util.*;
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
		boolean dp[][]=new boolean[n][k+1];
           for(int i=0;i<n;i++){
             dp[i][0]=true;
		   }
		if(arr[0]<=k){
		dp[0][arr[0]]=true;
		}
		for(int i=1;i<n;i++){
			for(int j=1;j<=k;j++){
				boolean notTaken = dp[i-1][j];
                 boolean taken = false;
                if(arr[i]<=j){
                 taken = dp[i-1][j-arr[i]];
				}
                    dp[i][j]=notTaken|taken;
			}
		}
		return dp[n-1][k];
    }
}
