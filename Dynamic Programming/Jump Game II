You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Intuition: Simple memoization approach.


class Solution {
    public int helper(int ind,int[] nums,int n,int[] dp){
        if(ind>=n-1){
            return 0;
        }
        if(dp[ind]!=-1){
            return dp[ind];
        }
        int min=10001;
        for(int i=1;i<=nums[ind];i++){
            min=Math.min(min,1+helper(i+ind,nums,n,dp));
        }
        return dp[ind]=min;
    }
    public int jump(int[] nums) {
        int[] dp =new int[nums.length];
        Arrays.fill(dp,-1);
        return helper(0,nums,nums.length,dp);
    }
}
