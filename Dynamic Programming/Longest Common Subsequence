Given two strings, 'S' and 'T' with lengths 'M' and 'N', find the length of the 'Longest Common Subsequence'.
For a string 'str'(per se) of length K, the subsequences are the strings containing characters in the same relative order as they are present in 'str,' but not necessarily contiguous. 
Subsequences contain all the strings of length varying from 0 to K.

Recursion and Memoization:
import java.util.*;
public class Solution {

    public static int count(int ind1,int ind2,String s, String t,int[][] dp){
        if(ind1<0 || ind2<0){
            return 0;
        }
        if(dp[ind1][ind2]!=-1){
            return dp[ind1][ind2];
        }
        if(s.charAt(ind1)==t.charAt(ind2)){
            return dp[ind1][ind2]=1+count(ind1-1,ind2-1,s,t,dp);
        }else{
            return dp[ind1][ind2]=Math.max(count(ind1-1,ind2,s,t,dp),count(ind1,ind2-1,s,t,dp));
        }
    }
	public static int lcs(String s, String t) {
		//Your code goes here
        int l1=s.length(),l2=t.length();
        int[][] dp=new int[l1][l2];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return count(l1-1,l2-1,s,t,dp);
    }

}
