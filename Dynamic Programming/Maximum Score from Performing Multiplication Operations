You are given two integer arrays nums and multipliers of size n and m respectively, where n >= m. The arrays are 1-indexed.

You begin with a score of 0. You want to perform exactly m operations. On the ith operation (1-indexed), you will:

Choose one integer x from either the start or the end of the array nums.
Add multipliers[i] * x to your score.
Remove x from the array nums.
Return the maximum score after performing m operations.


Input: nums = [1,2,3], multipliers = [3,2,1]
Output: 14
Explanation: An optimal solution is as follows:
- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.
- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.
- Choose from the end, [1], adding 1 * 1 = 1 to the score.
The total score is 9 + 4 + 1 = 14.


class Solution {
    public int score(int ind,int j,int[] nums, int[] mults,int m,int[][] dp){
        if(m==mults.length){
            return 0;
        }
        if(dp[ind][m]!=-1001){
            return dp[ind][m];
        }
        int first=mults[m]*nums[ind]+score(ind+1,j,nums,mults,m+1,dp);
        int last=mults[m]*nums[j]+score(ind,j-1,nums,mults,m+1,dp);
        return dp[ind][m]=Math.max(first,last);
    }
    public int maximumScore(int[] nums, int[] multipliers) {
        int j=nums.length-1,m=multipliers.length;
        int[][] dp=new int[m][m];
        for(int[] arr: dp){
            Arrays.fill(arr,-1001);
        }
        return score(0,j,nums,multipliers,0,dp);
    }
}
