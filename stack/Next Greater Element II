Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. 
If it doesn't exist, return -1 for this number.

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.

Intuition: traverse from 2n-1 to 0 when i>=n take index as i%n and add to stack until removal of lesser elements from stack.


class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int n=nums.length;
        Stack<Integer> st=new Stack<>();
        int[] res=new int[n];
        for(int i=2*n-1;i>=0;i--){
            while(!st.empty() && st.peek()<=nums[i%n]){
                st.pop();
            }
            if(i<n && !st.empty()){
                res[i%n]=st.peek();
            }else{
                res[i%n]=-1;
            }
            st.push(nums[i%n]);
        }
        return res;
    }
}
