Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

The following rules define a valid string:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".

Input: s = "()"
Output: true

class Solution {
    public boolean checkValidString(String s) {
        Stack<Character> st=new Stack<>();
        Stack<Integer> st1=new Stack<>();
        int n=s.length();
        for(int i=0;i<n;i++){
            char c=s.charAt(i);
            if(c=='('){
                st.push(c);
            }else if(c=='*'){
                st1.push(i);
            }else{
                if(!st.empty()){
                    st.pop();
                }else if(!st1.empty()){
                    st1.pop();
                }else{
                    return false;
                }
            }
        }
        st.clear();
        st1.clear();
        for(int i=n-1;i>=0;i--){
            char c=s.charAt(i);
             if(c==')'){
                st.push(c);
            }else if(c=='*'){
                st1.push(i);
            }else{
                if(!st.empty()){
                    st.pop();
                }else if(!st1.empty()){
                    st1.pop();
                }else{
                    return false;
                }
            }
        }
        return true;
    }
}
