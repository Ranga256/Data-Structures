You are given an integer n.

Each number from 1 to n is grouped according to the sum of its digits.

Return the number of groups that have the largest size.

Input: n = 13
Output: 4
Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:
[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].
There are 4 groups with largest size.

Intuition: Store the sum of digit in map and get maxxcount and check how many digits are there with that count.

class Solution {
    public int countLargestGroup(int n) {
        int[] dp=new int[37];
        int max=0,count=0;
        for(int i=1;i<=n;i++){
            dp[digitsum(i)]++;
        }
        for(int i=1;i<dp.length;i++){
            max=Math.max(dp[i],max);
        }
        for(int i=0;i<dp.length;i++){
            if(dp[i]==max){
                count++;
            }
        }
        return count;
    }
    public int digitsum(int i){
        int rem,sum=0;
        while(i>0){
            rem=i%10;
            sum+=rem;
            i=i/10;
        }
        return sum;
    }
}
