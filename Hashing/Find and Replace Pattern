Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.

Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.

Intuition: Take two maps for storing pattern vs string and string vs pattern and check whether same pattern or not and store in list if same.


class Solution {
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        List<String> list=new ArrayList<>();
        int plen=pattern.length();
        for(int i=0;i<words.length;i++){
            int flag=1;
            int len=words[i].length();
            if(plen!=len){
                continue;
            }else{
                Map<Character,Character> hash=new HashMap<>();
                Map<Character,Character> hash1=new HashMap<>();
                for(int j=0;j<plen;j++){
                    if(hash.containsKey(words[i].charAt(j))){
                        if(hash.get(words[i].charAt(j))==pattern.charAt(j)){
                            flag=0;
                            continue;
                        }else{
                            flag=1;
                            break;
                        }
                    }else if(hash1.containsKey(pattern.charAt(j))){
                        if(hash1.get(pattern.charAt(j))==words[i].charAt(j)){
                            flag=0;
                            continue;
                        }else{
                            flag=1;
                            break;
                        }
                    }else{
                        flag=0;
                        hash.put(words[i].charAt(j),pattern.charAt(j));
                        hash1.put(pattern.charAt(j),words[i].charAt(j));
                    }
                } 
                if(flag==0){
                    list.add(words[i]);
                }
            }
        }
        return list;
    }
}
